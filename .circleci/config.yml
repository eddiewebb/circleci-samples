version: 2.1

orbs:
  queue: eddiewebb/queue@3.3.3

executors:
  ecr:
    docker:
    - image: public.ecr.aws/docker/library/bash:devel-alpine3.21
  latest:
    docker:
    - image: cimg/base:stable


jobs:
  only:
    executor: latest
    steps:
      - run:
          name: "Get task token from socket"
          command: |
            TASK_TOKEN_SOCKET="/tmp/circleci-ts.sock"
            
            if [ ! -S "$TASK_TOKEN_SOCKET" ]; then
              echo "ERROR: Task token socket not found at $TASK_TOKEN_SOCKET"
              exit 1
            fi
            
            SOCKET_RESPONSE=$(echo "get_token" | nc -U "$TASK_TOKEN_SOCKET")
            
            if [ -z "$SOCKET_RESPONSE" ]; then
              echo "ERROR: Failed to get response from socket"
              exit 1
            fi
            
            if ! echo "$SOCKET_RESPONSE" | jq empty 2>/dev/null; then
              echo "ERROR: Invalid JSON response from socket"
              echo "Response: $SOCKET_RESPONSE"
              exit 1
            fi
            
            TASK_TOKEN=$(echo "$SOCKET_RESPONSE" | jq -r '.token')
            
            if [ -z "$TASK_TOKEN" ] || [ "$TASK_TOKEN" = "null" ]; then
              echo "ERROR: No task token in socket response"
              exit 1
            fi
            
            echo "Task token obtained"
            echo "TASK_TOKEN=$TASK_TOKEN" >> $BASH_ENV
      - run:
          name: "Exchange task token for CircleCI token"
          command: |
            echo "Exchanging task token for CircleCI token..."
            CIRCLE_TOKEN_RESPONSE=$(curl -s -X POST \
              -H "Authorization: bearer $TASK_TOKEN" \
              "https://circleci.com/api/v2/user/access-token")
            
            if ! echo "$CIRCLE_TOKEN_RESPONSE" | jq empty 2>/dev/null; then
              echo "ERROR: Failed to exchange task token for token"
              echo "Response: $CIRCLE_TOKEN_RESPONSE"
              exit 1
            fi
            
            CIRCLE_TOKEN=$(echo "$CIRCLE_TOKEN_RESPONSE" | jq -r '.token')
            
            if [ -z "$CIRCLE_TOKEN" ] || [ "$CIRCLE_TOKEN" = "null" ]; then
              echo "ERROR: Invalid CircleCI token in response"
              exit 1
            fi
            
            echo "CircleCI token obtained"
            echo "CIRCLE_TOKEN=$CIRCLE_TOKEN" >> $BASH_ENV
      - run:
          name: beat up APIs
          command: |
            function hitit {
              http_code=`curl -Ls -H "Circle-Token: $CIRCLE_TOKEN" \
                -o response.txt -w "%{response_code}" \
                "$1"`
              if [ "$http_code" != "200" ]; then
                echo "API call to $1 failed with code $http_code"
                echo "$http_code $1" >> failures.txt
                cat response.txt
                echo -e "\n\n"
              else
                echo "Success $http_code to $1"
              fi 
            }
            export project_slug="gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"

            hitit "https://google.com"
            hitit "https://circleci.com/api/v2/project/gh/${project_slug}"
            hitit "https://circleci.com/api/v2/project/gh/${project_slug}/checkout-key"
            hitit "https://circleci.com/api/v2/project/gh/${project_slug}/settings"
            hitit "https://circleci.com/api/v2/me"
            hitit "https://circleci.com/api/v1.1/project/gh/${project_slug}"
            hitit "https://circleci.com/api/v1.1/project/gh/${project_slug}/tree/master"
            hitit "https://circleci.com/api/v2/pipeline"
            hitit "https://circleci.com/api/v2/project/gh/${project_slug}/job/${CIRCLE_BUILD_NUM}"
            hitit "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}"
            hitit "https://circleci.com/api/v2/deploy/environments"
            hitit "https://circleci.com/api/v2/projects/${CIRCLE_PROJECT_ID}/pipeline-definitions"
            hitit "https://circleci.com/api/v2/project/gh/${project_slug}/schedule"
            hitit "https://circleci.com/api/v2/insights/{project_slug}/flaky-tests"
            echo "FAILED URLS"
            cat failures.txt
workflows:
  pass:
    jobs:
      - only:
          name: serial-a
  # fail:
  #   jobs:
  #     - only:
  #        context: [only_one_workflow]
        

